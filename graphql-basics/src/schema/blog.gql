type Subscription {
    userCreated(organization: String!): UserSubscriptionPayload!
    count: Int!
    comment(postId: String!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

type Query {
    greeting(name: String): String!
    users(range: Range): [User!]!
    me: User!
    posts: [Post!]!
    comments: [Comment !]!
}

type Mutation {
    createUser(user: CreateUserInput!): User!
    deleteUser(id: Int!): User!
    updateUser(id: Int!, args: UpdateUserInput!): User!
    createPost(post: CreatePostInput!): Post!
    deletePost(id: Int!): Post!
    createComment(comment: CreateCommentInput!): Comment
}

input CreateCommentInput {
    body: String!
    author: String!
    post: String!
}

input UpdateUserInput {
    age: Int!,
    email: String!
}

input CreateUserInput {
    name: String!
    email: String!
    age: Int
}

input CreatePostInput {
    author: Int!
    title: String!
    body: String!
    published: Boolean!
}

input Range {
    min: Int!
    max: Int!
}

enum MutationType {
    CREATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type UserSubscriptionPayload {
    mutation: MutationType!
    data: User!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}

type User {
    id: Int!
    organization: String!
    name: String!
    email: String!
    age: Int
    posts: [Post]!
    comments: [Comment]!
}

type Post {
    id: Int!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    authorId: Int!
    comments: [Comment]!
}

type Comment {
    id: Int!
    body: String!
    author: User!
    authorId: Int!
    post: Post!
    postId: Int!
}
